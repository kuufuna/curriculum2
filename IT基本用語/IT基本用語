・開発環境
開発をする作業場所、開発をするための必要なものが揃った場所

・検証環境
開発し終わった、リリース予定の機能をテストするための環境

・本番環境
出来上がったシステムやサービスが実際に動く環境

・基本設計書
基本設計の結果をまとめた資料のこと。
お客さまの「こんなものが欲しいんだよね～」を受けて考えた「それじゃあ、こんなシステムを作りましょう」な全体像や概要をまとめた資料のこと

・詳細設計書
詳細設計の結果をまとめた資料のこと。
システムの詳細をまとめた資料で、実際のプログラムを作るときに見る資料のこと

・Ajax
JavaScriptとXMLを使って非同期にサーバとの間の通信を行うことが出来る。
Ajaxを使用することで画面遷移をせずにHTMLを更新することが可能なので、ユーザビリティの向上やサーバ負荷の軽減に繋がる。

・API
自己のソフトウェアを一部公開して、他のソフトウェアと機能を共有できるようにしたもの

・SVN（Subversion)
プログラムのソースコードなどを管理する集中型バージョン管理システムの一つ

・デプロイ
作ったプログラムをしかるべき場所に置いたり、使える状態にすること

・バリデーション
入力内容や記述内容が要件を満たしているか、妥当性を確認すること

・アジャイル
短い開発期間単位を採用することで、リスクを最小化しようとする開発手法

・ウォーターフォール
上流工程から下流工程へ順次移行していく開発手法

・エビデンス
システム開発などで、最終検証段階においてシステムが発注どおりに動作していることを示す証拠となる書類やデータなどのこと

・バッジ
一定期間や一定量ごとにデータをまとめて一括して処理する方式

・MVCモデル
プログラムの中身を「モデル（Model）」「ビュー（View）」「コントローラ（Controller）」の3つに分類しておくこと

・統合開発環境（IDE)
ソフトウェアの開発において用いられるエディタ、コンパイラ、リンカ、デバッガ、その他の支援ツールなどを統合・統一化した開発環境

・JOIN
複数テーブルの結合を行いたいときに使用する命令。
「JOIN」の種類は大きく分けると、3種類存在します

* クロス結合　すべての組み合わせ作成する結合方式
* 内部結合　指定した関連性のある要素を軸にして、組み合わせてくれる命令
* 外部結合　「内部結合 + α」の情報を表示するだけの方式

・コンフリクト
複数の同種の何かが同じ資源を同時に利用しようとして競合状態になってしまうこと

・サブクエリ
データベースなどの問い合わせ（クエリ）文の内部に含まれる、別の問い合わせ文のこと

・bootstrap
人間がコンピュータに電源を投入（あるいはリセット）してから、OSが操作可能な状態になるまでに自動的に行われる一連の処理

・ライブラリ
汎用性の高いプログラムを他のプログラムから利用できるようにしたプログラムの集合のこと

・フレームワーク
アプリケーションの土台として機能するソフトウェアのこと

・プルリクエスト
コードの変更をレビュワーに通知し、マージを依頼する機能

・Git flow
Gitの機能であるブランチを活用したGitの開発手法

・CRON
ジョブ（スクリプト）を自動実行するためのデーモンプロセス

・トランザクション
取引記録などの意味の他に、ソフトウェアの処理方式の一つ

・排他ロック
データベースシステムなどでデータの整合性を保つために行われる同時アクセス制限。同時に一つの主体しか実施できないもの

・チューニング
コンピュータ、ソフトウェアなどの設定や構成を調整すること

・パフォーマンス
コンピューターの処理性能や実行速度、通信回線の速度・容量のこと

・スロークエリ
データベースにおいて、時間のかかっているSQL(遅いSQL)のこと

・クエリログ
全てのSQLクエリを出力してくれるログ

・ハッシュ化
ハッシュ化とは、元のデータから一定の計算手順に従ってハッシュ値と呼ばれる規則性のない固定長の値を求め、その値によって元のデータを置き換えること

・CRUD
ほとんど全てのコンピュータソフトウェアが持つ永続性の4つの基本機能のイニシャルを並べた用語。
Create（生成）、Read（読み取り）、Update（更新）、Delete（削除）

・REST
Webサービスの設計モデル。
RESTなWebサービスは、そのサービスのURIにHTTPメソッドでアクセスすることでデータの送受信を行う。